/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2023-09-22 07:51:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class board_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/loginmenu.jsp", Long.valueOf(1695362264060L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write(" <link rel=\"stylesheet\" type=\"text/css\" href=\"./css/board_css.css\">\r\n");
      out.write(" <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/reset.css\"> -->\r\n");
      out.write("<title>board</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-3.5.1.min.js\"></script>\r\n");
      out.write("<!-- 이건 write 작성할때 로그인 되어있는지 확인 -->\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
 String id = (String)session.getAttribute("id"); 
      out.write("\r\n");
      out.write("\r\n");
      out.write(" function writeBtn() {\r\n");
      out.write("	 	const id = \"");
      out.print(id);
      out.write("\";\r\n");
      out.write("		const param = {id:id};\r\n");
      out.write("		$.ajax({\r\n");
      out.write("	        type: 'POST',\r\n");
      out.write("	        url: 'writeJson.json',\r\n");
      out.write("	        dataType: 'json',\r\n");
      out.write("	        data: param,\r\n");
      out.write("	        success: function(data) {\r\n");
      out.write("	        	console.log(\"id : \" + id);\r\n");
      out.write("	        	console.log(\"data : \" + data);\r\n");
      out.write("	        	console.log(\"data['rs'] : \" + data['rs']);\r\n");
      out.write("	        	if (data['rs'] === 1) {\r\n");
      out.write("	        		location.href = 'write.jsp';\r\n");
      out.write("	        	}\r\n");
      out.write("				else {\r\n");
      out.write("					alert(\"게시글을 작성하려면 로그인을 먼저 하셔야됩니다\");\r\n");
      out.write("					location.href = 'login.jsp'\r\n");
      out.write("				};\r\n");
      out.write("	        }, error: function(xhr, status, error) {\r\n");
      out.write("	        	console.log(xhr, status, error);\r\n");
      out.write("	        }\r\n");
      out.write("		});\r\n");
      out.write("	};\r\n");
      out.write("	$(function() {\r\n");
      out.write("		$('#b_writeBtn').click(function() {\r\n");
      out.write("			writeBtn();\r\n");
      out.write("			const id = ");
      out.print(id);
      out.write(";\r\n");
      out.write("			console.log(\"id : \" + id);\r\n");
      out.write("			\r\n");
      out.write("			if (id === null || id.trim() === '') {\r\n");
      out.write("	            alert(\"게시글을 작성하려면 로그인을 먼저 하셔야됩니다\");\r\n");
      out.write("	            location.href = 'login.jsp';\r\n");
      out.write("	        }\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("	#service {text-align: center;}\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("	function deleteConfirm() {\r\n");
      out.write("		const input = confirm(\"회원을 탈퇴할까요?\");\r\n");
      out.write("		alert(input);\r\n");
      out.write("		if (input) location.href = \"delete.do\";\r\n");
      out.write("		else return;\r\n");
      out.write("	};\r\n");
      out.write("</script>\r\n");
      out.write("<h2 id=\"service\">\r\n");
      out.write("<a href=\"index.do\">Home</a>\r\n");
      out.write("<a href=\"board.do\">게시판</a>\r\n");
      out.write("\r\n");
 if (session.getAttribute("id") == null) { 
      out.write("\r\n");
      out.write("	 | <a href=\"join.do\" class =\"menu\">회원가입</a> |\r\n");
      out.write("	<a href=\"login.do\">로그인</a>\r\n");
 } else { 
      out.write("\r\n");
      out.write("	 | <a href=\"update.do\">정보수정</a> |\r\n");
      out.write("	<a href=\"#\" onclick=\"deleteConfirm();\">회원탈퇴</a> |\r\n");
      out.write("	<a href=\"logout.do\">로그아웃</a>\r\n");
 		String seGrade = (String)session.getAttribute("grade");
		if (!(seGrade.equals("GENERAL"))) { 
      out.write("\r\n");
      out.write("	 | <a href=\"memberList.do\">회원목록</a> <br>\r\n");
 		} 
      out.write('\r');
      out.write('\n');
		String grade = "";
		if (seGrade.equals("MANAGER")) grade = "매니저";
		else if (seGrade.equals("ASSOCIATE")) grade = "부매니저";
		else if (seGrade.equals("STAFF")) grade = "스태프";
		else grade = "일반회원";

      out.write('\r');
      out.write('\n');
      out.write('	');
      out.print(grade);
      out.write(' ');
      out.print(session.getAttribute("nickname") );
      out.write('(');
      out.print(session.getAttribute("id") );
      out.write(")님 로그인 중 <br>\r\n");
 } 
      out.write("\r\n");
      out.write("</h2>\r\n");
      out.write("<hr>");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>OO 게시판</h1>\r\n");
      out.write("	<form action=\"write\">\r\n");
      out.write("		<div class=\"board_box\">\r\n");
      out.write("			<div>\r\n");
      out.write("				<div>\r\n");
      out.write("					<select>\r\n");
      out.write("						<option>제목</option>\r\n");
      out.write("						<option>내용</option>\r\n");
      out.write("						<option>작성자</option>\r\n");
      out.write("					</select>\r\n");
      out.write("					<input type=\"text\" name=\"b_search\" id=\"b_search\">\r\n");
      out.write("					<input type=\"button\" value=\"검색하기\" id=\"b_searchBtn\">\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		\r\n");
      out.write("			<table class=\"table_ul\" border=\"1\">\r\n");
      out.write("	            <tbody>\r\n");
      out.write("	                <tr class=\"tul_th\">\r\n");
      out.write("	                    <td class=\"th_span th_num\">번호</td>\r\n");
      out.write("	                    <td class=\"th_span\">제목</td>\r\n");
      out.write("	                    <td class=\"th_span\">작성자</td>\r\n");
      out.write("	                    <td class=\"th_span\">조회수</td>\r\n");
      out.write("	                    <td class=\"th_span\">작성일</td>\r\n");
      out.write("	                </tr>\r\n");
      out.write("	                <tr>\r\n");
      out.write("	                    <td class=\"tul_span\"><a href=\"view.jsp\">0</a></td>\r\n");
      out.write("	                    <td class=\"tul_span\"><a href=\"view.jsp\">게시판 테스트글</a></td>\r\n");
      out.write("	                    <td class=\"tul_span\"><a href=\"view.jsp\">관리자</a></td>\r\n");
      out.write("	                    <td class=\"tul_span\"><a href=\"view.jsp\">1</a></td>\r\n");
      out.write("	                    <td class=\"tul_span\"><a href=\"view.jsp\">2021-08-05</a></td>\r\n");
      out.write("	                </tr>\r\n");
      out.write("	            </tbody>\r\n");
      out.write("	        </table>\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("			<div><input type=\"button\" value=\"글쓰기\" id=\"b_writeBtn\"></div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
